
									DATE CLASS IN RUBY

**'date' provides two classes: Date and DateTime.

*Date-A Date object is created with Date::new, Date::jd, Date::ordinal, Date::commercial, Date::parse, Date::strptime, Date::today, Time#to_date, etc.
**creating date objects

3.0.0 :009 > Date.new(2011,03,19)
 => #<Date: 2011-03-19 ((2455640j,0s,0n),+0s,2299161j)> 

3.0.0 :010 > Date.jd(2476982)     **Creates a date object denoting the given chronological Julian day number.
 => #<Date: 2069-08-23 ((2476982j,0s,0n),+0s,2299161j)> 

3.0.0 :011 > Date.ordinal(2001,34)     **34th day of 2001
 => #<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)> 

3.0.0 :012 > Date.parse('2000-04-19')
 => #<Date: 2000-04-19 ((2451654j,0s,0n),+0s,2299161j)> 

3.0.0 :013 > Date.parse('19 dec 1999')
 => #<Date: 1999-12-19 ((2451532j,0s,0n),+0s,2299161j)> 

3.0.0 :014 > Date.commercial(2001,5,6)        **creating object with week and day
 => #<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)> 
3.0.0 :015 > 

--------------------------------------

**A Date object has various methods-

3.0.0 :016 > d=Date.parse('19 dec 1999')
 => #<Date: 1999-12-19 ((2451532j,0s,0n),+0s,2299161j)> 

3.0.0 :017 > d.year
 => 1999 

3.0.0 :018 > d.mon
 => 12 

3.0.0 :019 > d.mday
 => 19 

3.0.0 :020 > d.wday
 => 0 

3.0.0 :021 > d += 1
 => #<Date: 1999-12-20 ((2451533j,0s,0n),+0s,2299161j)> 

-------------------------------------
**_parse -Parses the given representation of date and time, and returns a hash of parsed elements.

 > Date._parse('1999-12-19')
 => {:year=>1999, :mon=>12, :mday=>19} 


**_strptime -Parses the given representation of date and time with the given template, and returns a hash of parsed elements. 

 > Date._strptime('1999-12-19','%Y-%m-%d')
 => {:year=>1999, :mon=>12, :mday=>19} 


**gregorian_leap? -Returns true if the given year is a leap year of the proleptic Gregorian calendar.

> Date.gregorian_leap?(2000)
 => true 


**julian_leap? -Returns true if the given year is a leap year of the proleptic Julian calendar.

> Date.julian_leap?(2000)
 => true 


**rfc2822 Creates a new Date object by parsing from a string according to some typical RFC 2822 formats.

> Date.rfc2822('Sat, 3 Feb 2001 00:00:00 +0000')
 => #<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)>



**today -it gives current date

 > Date.today
 => #<Date: 2022-01-13 ((2459593j,0s,0n),+0s,2299161j)> 


**valid_date? -Returns true if the given calendar date is valid, and false if not.

 > Date.valid_date?(1999,13,19)
 => false 


**valid_commercial? -Returns true if the given week date is valid, and false if not.

 > Date.valid_commercial?(1999,5,14)
 => false 


**valid_ordinal? - 
 > Date.valid_ordinal?(2022,13)
 => true 


**xmlschema -Creates a new Date object by parsing from a string according to some typical XML Schema formats.

> Date.xmlschema('1999-12-19')
 => #<Date: 1999-12-19 ((2451532j,0s,0n),+0s,2299161j)> 


** +,- =adding in date and and doing less in date

2.7.5 :004 > d -=1
 => #<Date: 1999-12-18 ((2451531j,0s,0n),+0s,2299161j)> 
2.7.5 :005 > d += 1
 => #<Date: 1999-12-19 ((2451532j,0s,0n),+0s,2299161j)> 
2.7.5 :006 > d -= 1
 => #<Date: 1999-12-18 ((2451531j,0s,0n),+0s,2299161j)> 


** << n -Returns a date object pointing n months before self. The argument n should be a numeric value.

> Date.new(1999,12,19) << 2
 => #<Date: 1999-10-19 ((2451471j,0s,0n),+0s,2299161j)> 


** <=> - Compares the two dates and returns -1, zero, 1 or nil. The other should be a date object 

> Date.new(1999,12,19) <=> Date.new(2000,1,1)
 => -1 


** === - return true if they are same

 Date.new(1999,12,19) === Date.new(2000,1,1)
 => false


** >> n -Returns a date object pointing n months after self. The argument n should be a numeric value.


> Date.new(1999,12,19) >> 2
 => #<Date: 2000-02-19 ((2451594j,0s,0n),+0s,2299161j)> 

**ajd - Returns the astronomical Julian day number. This is a fractional number, which is not adjusted by the offset.

> Date.new(1999,12,19).ajd
 => (4903063/2) 


**cwday -Returns the day of calendar week (1-7, Monday is 1).

> Date.new(1999,12,19).cwday
 => 7 

**cweek -Returns the calendar week number (1-53).

 > Date.new(1999,12,19).cweek
 => 50 

**cwyear -Returns the calendar week based year.

> Date.new(1999,12,19).cwyear
 => 1999 

**gregorian? -Returns true if the date is on or after the day of calendar reform.

 > Date.new(1581,10,15).gregorian?
 => false 


**jd -return the julian day number 

 > Date.new(1999,12,19).jd
 => 2451532 


**julian? -Returns true if the date is before the day of calendar reform.

 > Date.new(1581,10,15).julian?
 => true 

**ld -Returns the Lilian day number. This is a whole number, which is adjusted by the offset as the local time.

 > Date.new(1999,12,19).ld
 => 152372 


**leap? -Returns true if the year is a leap year.



> Date.new(1999,12,19).leap?
 => false 


**sunday? -return true if day is sunday

 > Date.new(1999,12,19).sunday?
 => true 


**monday? -return true if day is monday
> Date.new(1999,12,19).monday?
 => false


**next_year(n) -This method is equivalent to d >> (n * 12).

> Date.new(1999,12,19).next_year
 => #<Date: 2000-12-19 ((2451898j,0s,0n),+0s,2299161j)> 


**prev_year(n) -it returns date with one year previous

> Date.new(1999,12,19).prev_year(5)
 => #<Date: 1994-12-19 ((2449706j,0s,0n),+0s,2299161j)>

**to_s -returns as string

 > Date.new(1999,12,19).to_s
 => "1999-12-19"

**yday -Returns the day of the year (1-366).

 > Date.new(1999,12,19).yday
 => 353 


------------------------------------------------------------------------------------------------







