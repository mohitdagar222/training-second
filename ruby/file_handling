
							FILE HANDLING

**Ruby provides a whole set of I/O-related methods implemented in the Kernel module. All the I/O methods are derived from the class IO.
  The class IO provides all the basic methods, such as read, write, gets, puts, readline, getc, and printf.

**opening and closing files

**File.new method = You can create a File object using File.new method for reading, writing, or both, according to the mode string. Finally, you can use File.close method to close that file.

aFile = File.new("filename", "mode")
   # ... process the file
aFile.close


**File.open method = You can use File.open method to create a new file object and assign that file object to a file.  File.open method can be associated with a block, whereas you cannot do the same using the File.new method.

File.open("filename", "mode") do |aFile|
   # ... process the file
end

==MODES 

r = Read-only mode. The file pointer is placed at the beginning of the file. This is the default mode.

r+ = Read-write mode. The file pointer will be at the beginning of the file.

a =Write-only mode. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.

a+ = Read and write mode. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.

w = Write-only mode. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.

w+ = Read-write mode. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.


-------------------------------------------------------------
**sysread method = You can use the method sysread to read the contents of a file. You can open the file in any of the modes when using the method sysread.


afile = File.new("input.txt", "r")
if afile
  content = afile.sysread(30)
  puts content
else
  puts "unable to open file"
end

#This statement will output the first 30 characters of the file.
# The file pointer will now be placed at the 31st character in the file.


**syswrite method = You can use the method syswrite to write the contents into a file. You need to open the file in write mode when using the method syswrite.


afile = File.new("input.txt", "a+")
if afile
  afile.syswrite("i am from gurugram")
else
  puts "unable to open file"
end


**each_byte method = This method belongs to the class File. The method each_byte is always associated with a block.

afile = File.new("input.txt", "a+")
if afile
  afile.each_byte { |ch| putc ch; putc ?. }
else
  puts "unable to open file"
end


---------------------------------------------------------------------

**IO.readline = File class is a subclass of IO class. One of the IO class methods is IO.readlines. This method returns the contents of the file line by line.

arr = IO.readlines("input.txt")
puts arr[0]
puts arr[1]


In this code, the variable arr is an array. Each line of the file input.txt will be an element in the array arr. Therefore, arr[0] will contain the first line, whereas arr[1] will contain the second line of the file.



**IO.foreach = This method also returns output line by line. The difference between the method foreach and the method readlines is that the method foreach is associated with a block. However, unlike the method readlines, the method foreach does not return an array.


IO.foreach("input.txt") { |lines| puts lines }


----------------------------------------------------------------------------

**Renaming and Deleting Files


**delete a file
File.delete("inputfile")

**rename a file
File.rename("input.txt", "inputfile")

-----------------------------------------------------------------------------

**file modes and ownership = Use the chmod method with a mask to change the mode or permissions/access list of a file

file = File.new( "test.txt", "w" )
file.chmod( 0755 )



-----------------------------

**File Enquiries 

The following command tests whether a file exists before opening it −
File.open("input1.txt") if File::exists? ("input1.txt")

The following command inquire whether the file is really a file −
File.file?( "text.txt" ) 

The following command finds out if the given file name is a directory −
File::directory?( "/usr/local/bin" ) =true

The following command finds whether the file is readable, writable or executable −
File.readable?( "test.txt" )   # => true
File.writable?( "test.txt" )   # => true
File.executable?( "test.txt" ) # => false

The following command returns size of the file and type of the file −
File.size?( "text.txt" )     # => 1002
File::ftype( "test.txt" )     # => file


The following command can be used to find when a file was created, modified, or last accessed −

File::ctime( "test.txt" ) # => Fri May 09 10:06:37 -0700 2008
File::mtime( "text.txt" ) # => Fri May 09 10:44:44 -0700 2008
File::atime( "text.txt" ) # => Fri May 09 10:45:01 -0700 2008


--------------------------------------------

**Navigating through directories 

**To change directory within a Ruby program, use Dir.chdir as follows. This example changes the current directory to /usr/bin.

Dir.chdir("/usr/bin")


**to find out what the current directory is with Dir.pwd 

puts Dir.pwd


**to  get a list of the files and directories within a specific directory using Dir.entries 

puts Dir.entries("/home/beryl/Documents").join(",")


**Dir.entries returns an array with all the entries within the specified directory. Dir.foreach provides the same feature −

Dir.foreach("/usr/bin") do |entry|
   puts entry
end


**An even more concise way of getting directory listings is by using Dir's class array method −

Dir["/usr/bin/*"]



**deleting a directory -
Dir.delete("testdir")


**creating temporary directories and files

require 'tmpdir'
   tempfilename = File.join(Dir.tmpdir, "tingtong")
   tempfile = File.new(tempfilename, "w")
   tempfile.puts "This is a temporary file"
   tempfile.close
   File.delete(tempfilename)


require 'tempfile'
   f = Tempfile.new('tingtong')
   f.puts "Hello"
   puts f.path
   f.close
-----------------------------------------



