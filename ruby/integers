					                 RUBY INTEGER METHODS
1) public class Methods-

**sqrt(n)--Returns the integer square root of the non-negative integer n, i.e. the largest non-negative integer less than or equal to the square root of n.

puts Integer.sqrt(36)
puts Integer.sqrt(24)

Output-
6
4

-----------------------------------------------

2) Public instance methods

**% it gives remainder




**&  The Bitwise AND operator applies a & operation on each bit of the sequence.

So let’s detail the following operation 7 & 5

7 in Base 2: 0000 0111
5 in Base 2: 0000 0101  128 64 32 16 8 4 2 1
 ---------------------- 
7: 0  0  0  0  0 1 1 1
   &  &  &  &  & & & &
5: 0  0  0  0  0 1 0 1
-----------------------
5: 0  0  0  0  0 1 0 1

puts 7 & 5

Output-5





**(*) it returns multiplication

puts 4 * 5

Output-20

**+ it returns addition

puts 4 + 5

Output-9


**(**) it returns power of a

2 ** 3

Output-8


**/ it returns division

250 / 5

Output-50


**- it returns substraction

puts 50 -30

Output-20


**< it returns true or false if less or not

40 < 50

Output-True


**<= it returns if less or equal to given number

puts 30 <= 30
Output-True


**<< The LEFT SHIFT operator << shifts each bit of a number to the left by n positions.
7 in Base 2: 0000 0111   128 64 32 16  8 4 2 1
   ---------------------- 
7:  0  0  0  0   0 1 1 1
shift each bit to the left by 2 positions
   ----------------------
28: 0  0  0  1   1 1 0 0

puts 7 << 2
Output-28


**<=> it returns 1 if greater 0 if equal and -1 if small

puts 5 <=> 4
Output-1


**== it returns true if both are equal

puts 67 == 67
Output-true


**abs-Returns the absolute value of int.

num=-235673
puts num.abs

Output-
235673

**allbits?(mask)-Returns true if all bits of int & mask are 1.

num=5
puts num.allbits?(9)
Output-false


**anybits?(mask)-Returns true if any bits of int & mask are 1.

num=5
puts num.allbits?(9)
Output-true



**bit_length-Returns the number of bits of the value of int.

num=7
puts num.bit_length
Output-3

**ceil([ndigits])-Returns the smallest number greater than or equal to int with a precision of ndigits decimal digits
	Returns self when ndigits is zero or positive.if number is positive than result will be in next group of nums ex 35 than it will be in 40 and if num is negative than ans will be in preeceded group ex -35 than output is -30

num=7.to_i
puts num.ceil(2)
Output-7


**chr(encoding) -Returns a string containing the character represented by the int's value according to encoding.


num=255
puts num.chr
puts num.chr(Encoding::UTF_8)
Output-�
ÿ


**coerce(numeric)-Returns an array with both a numeric and a big represented as Bignum objects.

num=(0x3FFFFFFFFFFFFFFF+1)
print num.coerce(67)
Output-[67, 4611686018427387904]


**digits(base)-Returns the digits of int's place-value representation with radix base (default: 10). The digits are returned as an array with the least significant digit as the first array element.


num=345
print num.digits
print num.digits(100)

Output-[5, 4, 3]
	[45, 3] 



**div-Performs integer division: **fdiv returns floating pont result of division

num=345
puts num.div(5)
Output-69


**downto(limit) {|i| block }--terates the given block, passing in decreasing values from int down to and including limit.

num=5
puts num.downto(2) { |i| print i,".. "}

Output-5.. 4.. 3.. 2..


** even? -Returns true if int is an even number.

num=5
puts num.even?

Output-false

**gcd()-Returns the greatest common divisor of the two integers. The result is always positive. 

num=60
puts num.gcd(80)

Output-num=20

**gcdlcm() -Returns an array with the greatest common divisor and the least common multiple of the two integers

num=60
print num.gcdlcm(80)

Output-[20, 240]


**lcm -
num=60
print num.lcm(80)
Output-240


**next -Returns the successor of int, i.e. the Integer equal to int+1.

num=60
print num.next
Output-61


**numerator -always returns self
**denominator -always returns 1
**integer? -always returns true
**odd? -numer is odd or not
**ord -rteurn the int itself


**pow() -it returns the power

num=6
print num.pow(6)

Output-46656


**pred -Returns the predecessor of int

puts 5.pred
Output-4


**rationalize -Returns the value as a rational. 

num=45.6
puts num.rationalize

Output-288/5

**remainder -it returns remainder

**round([ndigits] -Returns int rounded to the nearest value with a precision of ndigits decimal digits

1.round           #=> 1
1.round(2)        #=> 1
15.round(-1)      #=> 20
(-15).round(-1)   #=> -20




** size → Returns the number of bytes in the machine representation of int (machine dependent).



**succ -return the successor of int

** to_s(base)

Returns a string containing the place-value representation of int with radix base (between 2 and 36).

12345.to_s       #=> "12345"
12345.to_s(2)    #=> "11000000111001"binary
12345.to_s(8)    #=> "30071" octal
12345.to_s(10)   #=> "12345" decimal
12345.to_s(16)   #=> "3039" hexa
12345.to_s(36)   #=> "9ix"
78546939656932.to_s(36)  #=> "rubyrules"




**upto(limit){|i| print i}

num=5
puts num.upto(8) {|i| print i," "}


Output -5,6,7,8



** times{|i| print i}
num=5
num.times {|i| print i, " "}

Output-0 1 2 3 4


